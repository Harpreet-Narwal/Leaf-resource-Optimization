package lro.algo;

protected class noVenation{
    private long net;
    private long storage;
    private long mem;
    private long pp;
    private long ma;

    protected void noVenation(self,long[] data,long[] t){
        this.net = data[0];
        this.storage = data[1];
        this.mem = data[2];
        this.pp = data[3];
        this.ma = data[4];

        checkP(net,storage,mem,pp,ma,t);
    }

    private boolean checkForEnoughMemory(){
        // // Windows
        // #include "windows.h"
        // MEMORYSTATUSEX memInfo;
        // memInfo.dwLength = sizeof(MEMORYSTATUSEX);
        // GlobalMemoryStatusEx(&memInfo);
        // // total virtal mem
        // DWORDLONG totalVirtualMem = memInfo.ullTotalPageFile;
        // // total physical mem
        // DWORDLONG totalPhysMem = memInfo.ullTotalPhys;

        //linux
        // #include "sys/types.h"
        // #include "sys/sysinfo.h"

        // struct sysinfo memInfo;

        // sysinfo (&memInfo);
        // long long totalVirtualMem = memInfo.totalram;
        // //Add other values in next statement to avoid int overflow on right hand side...
        // Virtual
        // totalVirtualMem += memInfo.totalswap;
        // totalVirtualMem *= memInfo.mem_unit;
        // Physical
        // long long totalPhysMem = memInfo.totalram;
        // //Multiply in next statement to avoid int overflow on right hand side...
        // totalPhysMem *= memInfo.mem_unit;

    }

    private void checkP(self,long net,long storage,long mem,long pp,long ma,long[] t){
        int[] priorityArray = {3,1,2,4,5};
        if(net<t[0]){
            boolean em = checkForEnoughMemory();//--->(mem<t[2])
            if(!em){
                memScarcity();
            }
            netScarcity();
        }
        if(mem<t[2]){
            boolean es = checkForEnoughStorage();//--->(storage<t[1])
            if(!es){
                storeScarcity();
            }
            memScarcity();
        }
        if(storage<t[1]){
            storeScarcity();
        }
        if(pp<t[4]){
            processingPowerScarcity();
        }
    }

    private void netScarcity(){
        //thread generation
        //assigning priority
        Thread(priority);
        //Storing
        storingTasksInMemory();
    }
    private void memScarcity(){
        boolean es = checkForEnoughStorage();//--->(storage<t[1])
        if(!es){
            storeScarcity();
        }

        //thread generation
        //assigning priority
        Thread(priority);
        //using some space from storage as memory
        spaceAllocation();
    }
    private void storeScarcity(){
        boolean auto = checkForAutomation();
        if(auto){
            //thread generation
            //assigning priority
            Thread(priority);
            scaleAutomatically();
        }
        else{
            suspendProcessOrThread();
            NotifyUser();
        }
    }
    private void processingPowerScarcity(){
        //thread generation
        //assigning priority
        Thread(priority);
        checkForProcessesRunning();
        extractLowPriorityProcesses();
        suspendProcessOrThread();
        powerManagement();
        runImortantTasks();
    }

}