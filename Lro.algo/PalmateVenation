# Palmate venation: 1) starting point and midrib

# Initialize ready queue to be empty
ready_queue1=[]     #for midribs
ready_queue2=[]     #for veins

# Loop until all processes have completed
while not all_process_complete:

    # Check arrival time of all processes (midribs)
    for process in processes:

        # Add process to ready queue if it has arrived and is not already in the queue
        if process.arrival_time <= current_time and process not in ready_queue:
            ready_queue1.append(process)



        
    # If CPU is idle and there are processes in the ready queue
    if not current_process and ready_queue1:

        # Sort ready queue by priority (highest priority at front)
        ready_queue1.sort(key=lambda x: x.priority, reverse=True)

        # Remove highest priority process from front of ready queue and execute it
        current_process = ready_queue1.pop(0)


# 2) veins diverging from midribs:
        # Check arrival time of all processes (veins)
        for process in processes:

            # Add process to ready queue if it has arrived and is not already in the queue
            if process.arrival_time <= current_time and process not in ready_queue:
                ready_queue2.append(process)

        # If CPU is idle and there are processes in the ready queue
        if not current_process and ready_queue2:

            # Sort ready queue by priority (highest priority at front)
            ready_queue2.sort(key=lambda x: x.priority, reverse=True)

            # Remove highest priority process from front of ready queue and execute it
            current_process = ready_queue2.pop(0)

        # If CPU is not idle and a higher-priority process arrives
        elif current_process and ready_queue2 and ready_queue2[0].priority > current_process.priority:

            # Add currently executing process back to ready queue
            ready_queue2.append(current_process)

            # Sort ready queue by priority (highest priority at front)
            ready_queue2.sort(key=lambda x: x.priority, reverse=True)

            # Remove highest priority process from front of ready queue and execute it
            current_process = ready_queue2.pop(0)
        
